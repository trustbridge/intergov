# Docker-compose file for the demo purposes
# Once run you get a full local stack that can be used for
# end-to-end integration testing and/or system demos
# Usage: docker-compose up
# the var directory will be created with some container data, to persist it
# between runs. You may delete it to start afresh
version: '3.5'

# apis_external network should be generated as ntergov-apis-external because
# we say so.
# It's essential to make the whole system run locally.
# All containers attached to apis_external should have unique not autogenerated names.
# App projects rely on them to reach apis endpoints.

networks:
  apis_external:
    driver: bridge
    name: intergov-apis-external
  internal:
    driver: bridge
    name: int
  intercountries:
    driver: bridge
    name: intercountries

# using extensions to ignore base containers
x-services:
  base: &base_service
    # just run tests and exit in the base scenario,
    # run some specific service and keep working in other
    build:
      context: .
      dockerfile: ./Dockerfile-demo
    image: intergov-demo-base
    depends_on:
      - postgresql
      - elasticmq
      - minio
    volumes:
      # having this volume allows us to have updated code inside the docker
      # container without rebuilding, but saved artefacts from the container
      # itself to the repo
      # For production-like use it may be disabled
      - ./intergov:/src/intergov
      - ./tests:/src/tests
      - ./htmlcov:/src/htmlcov
    command: bash -c "cd /src && echo "Hello I'm a container""
    networks:
      - apis_external
      - internal
    env_file:
      - ./demo-default.env
      - ./demo-local.env

  base_api: &base_api_service
    <<: *base_service
    networks:
      - apis_external
      - internal

services:
  # service providers - minio, elasticMQ, postgres
  postgresql:
    image: postgres:10.5
    environment:
      - POSTGRES_USER=intergovuser
      - POSTGRES_PASSWORD=intergovpassword
    # we don't have to expose it directly to the host machine for our demo,
    # but it's useful for starting service on the host
    # ports: ['5432:5432']
    networks:
      - internal
    restart: on-failure

  elasticmq:
    image: softwaremill/elasticmq
    # we don't have to expose it directly to the host machine for our demo,
    # but it's useful for starting service on the host
    ports: ['9324:9324']
    volumes: ['./tests/local_elasticmq.conf:/opt/elasticmq.conf']
    logging:
      # because it's noisy
      driver: none
    networks:
      - internal
    restart: on-failure

  minio:
    # https://docs.min.io/docs/minio-docker-quickstart-guide.html
    image: minio/minio
    command: server /minio-data
    environment:
      - MINIO_ACCESS_KEY=minidemoaccess
      - MINIO_SECRET_KEY=miniodemosecret
      - MINIO_HTTP_TRACE=/minio-data/requests.log
    # we don't have to expose it directly to the host machine for our demo,
    # but it's useful for starting service on the host
    ports: ['9000:9000']
    restart: on-failure
    volumes:
      - ./var/minio-data:/minio-data
    networks:
      - internal
  # our services - message API, ....

  # this service just runs tests at startup
  tests-unit:
    <<: *base_service
    container_name: tests-unit
    command: bash -c "cd /src && sleep 10 && make test-unit"

  # uncomment to run it on each start. commented because they are slow
  # or just do manually:
  # docker-compose run tests sh -c "cd /src && py.test --integration"
  tests-integration:
    <<: *base_service
    container_name: tests-integration
    depends_on:
      - postgresql
      - elasticmq
      - minio
      - test-server-dummy-test-helper
      - message_rx_api
      - message_api
    command: bash -c "cd /src && sleep 10 && make test-integration"


  # used for tests to get responses specific responses.
  test-server-dummy-test-helper:
    <<: *base_service
    container_name: dummy-test-helper-server
    environment:
      - PYTHONPATH=/src/:/src/tests/helpers/servers/
    ports: ['5001:5001']
    command: bash -c "cd /src/tests/helpers/servers &&
      FLASK_ENV=development FLASK_APP=dummy_test_helper
      flask run --host=0.0.0.0 --port=5001"

  message_rx_api:
    <<: *base_api_service
    container_name: intergov_message_rx_api
    depends_on:
      - elasticmq
      - minio
    ports: ['5100:5100']
    command: bash -c "cd /src/intergov &&
      FLASK_ENV=development FLASK_APP=apis.message_rx.app
      flask run --host=0.0.0.0 --port=5100"

  message_api:
    <<: *base_api_service
    container_name: intergov_message_api
    depends_on:
      - elasticmq
      - minio
    ports: ['5101:5101']
    command: bash -c "cd /src/intergov &&
      FLASK_ENV=development FLASK_APP=apis.message.app
      flask run --host=0.0.0.0 --port=5101"

  subscriptions_api:
    <<: *base_api_service
    container_name: intergov_subscriptions_api
    ports: ['5102:5102']
    command: bash -c "cd /src/intergov &&
      FLASK_ENV=development FLASK_APP=apis.subscriptions.app
      flask run --host=0.0.0.0 --port=5102"

  document_api:
    <<: *base_api_service
    container_name: intergov_document_api
    ports: ['5103:5103']
    command: bash -c "cd /src/intergov &&
      FLASK_ENV=development FLASK_APP=apis.document.app
      flask run --host=0.0.0.0 --port=5103"
    networks:
      - internal
      - apis_external
      - intercountries

  # backroung processors scripts

  proc_inbound_message:
    <<: *base_service
    container_name: proc_inbound_message
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 8 &&
      python intergov/processors/message_processor/__init__.py"

  proc_callbacks_spreader:
    <<: *base_service
    container_name: proc_callbacks_spreader
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 9 &&
      python intergov/processors/callbacks_spreader/__init__.py"

  proc_callback_deliver:
    <<: *base_service
    container_name: proc_callback_deliver
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 10 &&
      python intergov/processors/callback_deliver/__init__.py"


  ###########################################################################
  # the next 5 containers are bound to the in memory channel used in the POC #
  ###########################################################################
  multichannel_bch_router:
    <<: *base_service
    container_name: multichannel_bch_router
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
      - PYTHONUNBUFFERED=1
    command: bash -c "cd /src & sleep 5 &&
      python intergov/processors/blockchain_router/__init__.py"

  # bch_observer:
  #   <<: *base_service
  #   container_name: bch_observer
  #   restart: on-failure
  #   environment:
  #     - PYTHONPATH=/src/
  #     - PYTHONUNBUFFERED=1
  #   command: bash -c "cd /src & sleep 5 &&
  #     python intergov/processors/blockchain_observer/__init__.py"

  rejected_messages_processor:
    <<: *base_service
    container_name: rejected_messages_processor
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 10 &&
      python intergov/processors/rejected_status_updater/__init__.py"

  channel_poller:
    <<: *base_service
    container_name: channel_poller
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 3 &&
      python intergov/processors/channel_poller/__init__.py"

  message_updater:
    <<: *base_service
    container_name: message_updater
    restart: on-failure
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 3 &&
      python intergov/processors/message_updater/__init__.py"

  obj_spider:
    <<: *base_service
    container_name: obj_spider
    environment:
      - PYTHONPATH=/src/
    command: bash -c "cd /src & sleep 11 &&
      python intergov/processors/obj_spider/__init__.py"
    networks:
      - internal
      - intercountries
